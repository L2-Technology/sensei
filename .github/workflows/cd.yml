on:
  push:
    # # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

name: CD
env:
  CLI: senseicli
  DAEMON: senseid
  DOCKER_CLI_EXPERIMENTAL: enabled
  

jobs:
  # This job downloads and stores `cross` as an artifact, so that it can be
  # re-downloaded across all of the jobs. Currently this copied pasted between
  # `ci.yml` and `deploy.yml`. Make sure to update both places when making
  # changes.
  install-cross:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 50
      - uses: XAMPPRocky/get-github-release@v1
        id: cross
        with:
          owner: rust-embedded
          repo: cross
          matches: ${{ matrix.platform }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v3
        with:
          name: cross-${{ matrix.platform }}
          path: ${{ steps.cross.outputs.install_path }}
    strategy:
      matrix:
        platform: [linux-musl]

  build-web-admin:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: build web
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - run: cd web-admin && npm install && CI=false npm run build

      - name: Upload web build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-web-admin-artifact-${{steps.tag.outputs.tag}}
          path: web-admin/build

  windows:
    runs-on: windows-latest
    needs: ["install-cross", "build-web-admin"]
    strategy:
      matrix:
        target:
          # MSVC
          #- i686-pc-windows-msvc
          - x86_64-pc-windows-msvc
          # GNU
          # - i686-pc-windows-gnu
          # - x86_64-pc-windows-gnu
    steps:
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build-web-admin-artifact-${{steps.tag.outputs.tag}}
          path: web-admin/build

      - run: bash ci/set_rust_version.bash stable ${{ matrix.target }}
      - run: bash ci/build.bash cargo ${{ matrix.target }} RELEASE
      - run: |
          cd ./target/${{ matrix.target }}/release/
          7z a "${{ env.DAEMON }}.zip" "${{ env.DAEMON }}.exe"
          mv "${{ env.DAEMON }}.zip" $GITHUB_WORKSPACE
          7z a "${{ env.CLI }}.zip" "${{ env.CLI }}.exe"
          mv "${{ env.CLI }}.zip" $GITHUB_WORKSPACE
        shell: bash
        # We're using using a fork of `actions/create-release` that detects
        # whether a release is already available or not first.
      - uses: XAMPPRocky/create-release@v1.0.2
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          # Draft should **always** be false. GitHub doesn't provide a way to
          # get draft releases from its API, so there's no point using it.
          draft: false
          prerelease: false

      - uses: actions/upload-release-asset@v1
        id: upload-cli-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.CLI }}.zip
          asset_name: ${{ env.CLI }}-${{steps.tag.outputs.tag}}-${{ matrix.target }}.zip
          asset_content_type: application/zip

      - uses: actions/upload-release-asset@v1
        id: upload-daemon-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DAEMON }}.zip
          asset_name: ${{ env.DAEMON }}-${{steps.tag.outputs.tag}}-${{ matrix.target }}.zip
          asset_content_type: application/zip

  macos:
    runs-on: macos-latest
    needs: build-web-admin
    strategy:
      matrix:
        target:
          # macOS
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          # iOS
          # - aarch64-apple-ios
          # - armv7-apple-ios
          # - armv7s-apple-ios
          # - i386-apple-ios
          # - x86_64-apple-ios
    steps:
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - name: Setup | Checkout
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: build-web-admin-artifact-${{steps.tag.outputs.tag}}
          path: web-admin/build

      # Cache files between builds
      - name: Setup | Cache Cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup | Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          target: ${{ matrix.target }}

      - name: Build | Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.os == 'ubuntu-latest' }}

      - run: tar -czvf ${{ env.CLI }}.tar.gz --directory=target/${{ matrix.target }}/release ${{ env.CLI }}
      - run: tar -czvf ${{ env.DAEMON }}.tar.gz --directory=target/${{ matrix.target }}/release ${{ env.DAEMON }}

      - uses: XAMPPRocky/create-release@v1.0.2
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - uses: actions/upload-release-asset@v1
        id: upload-cli-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.CLI }}.tar.gz
          asset_name: ${{ env.CLI }}-${{steps.tag.outputs.tag}}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

      - uses: actions/upload-release-asset@v1
        id: upload-daemon-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DAEMON }}.tar.gz
          asset_name: ${{ env.DAEMON }}-${{steps.tag.outputs.tag}}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

  linux:
    runs-on: ubuntu-latest
    needs: ["install-cross", "build-web-admin"]
    strategy:
      matrix:
        target:
          ## WASM, off by default as most rust projects aren't compatible yet.
          # - wasm32-unknown-emscripten
          ## Linux
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - arm-unknown-linux-gnueabi
          - arm-unknown-linux-gnueabihf
          - armv7-unknown-linux-gnueabihf
          - i686-unknown-linux-musl
          # - powerpc64le-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          # - i686-unknown-linux-gnu
          # - mips-unknown-linux-gnu
          # - mips64-unknown-linux-gnuabi64
          # - mips64el-unknown-linux-gnuabi64
          # - mipsel-unknown-linux-gnu
          # - powerpc-unknown-linux-gnu
          # - powerpc64-unknown-linux-gnu
          # - s390x-unknown-linux-gnu
          # - x86_64-unknown-linux-gnu
          ## Android
          # - aarch64-linux-android
          # - arm-linux-androideabi
          # - armv7-linux-androideabi
          # - i686-linux-android
          # - x86_64-linux-android
          ## *BSD
          # The FreeBSD targets can have issues linking so they are disabled
          # by default.
          # - i686-unknown-freebsd
          # - x86_64-unknown-freebsd
          # - x86_64-unknown-netbsd
          ## Solaris
          # - sparcv9-sun-solaris
          ## Bare Metal
          # These are no-std embedded targets, so they will only build if your
          # crate is `no_std` compatible.
          # - thumbv6m-none-eabi
          # - thumbv7em-none-eabi
          # - thumbv7em-none-eabihf
          # - thumbv7m-none-eabi
    steps:
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1

      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: build-web-admin-artifact-${{steps.tag.outputs.tag}}
          path: web-admin/build

      - uses: actions/download-artifact@v3
        with:
          name: cross-linux-musl
          path: /tmp/
      - run: chmod +x /tmp/cross

      - run: ci/set_rust_version.bash stable ${{ matrix.target }}
      - run: ci/build.bash /tmp/cross ${{ matrix.target }} RELEASE

      - run: tar -czvf ${{ env.CLI }}.tar.gz --directory=target/${{ matrix.target }}/release ${{ env.CLI }}
      - run: tar -czvf ${{ env.DAEMON }}.tar.gz --directory=target/${{ matrix.target }}/release ${{ env.DAEMON }}

      - uses: XAMPPRocky/create-release@v1.0.2
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload CLI Release Asset
        id: upload-cli-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.CLI }}.tar.gz
          asset_name: ${{ env.CLI }}-${{steps.tag.outputs.tag}}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Daemon Release Asset
        id: upload-daemon-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DAEMON }}.tar.gz
          asset_name: ${{ env.DAEMON }}-${{steps.tag.outputs.tag}}-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip
  build:
    needs: build-web-admin
    name: Build Docker image
    runs-on: ubuntu-18.04
    steps:
      - name: Set VERSION
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Checkout project
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        id: qemu

      - name: Setup Docker buildx action
        uses: docker/setup-buildx-action@v1
        id: buildx

      - name: Show available Docker buildx platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Run Docker buildx
        run: |
          docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --tag ${{ secrets.DOCKER_HUB_USER }}/sensei:$VERSION \
          --push .
